$prefix-grid: '' !default;
$prefix: '';
$prefix-col: 'col';
$class-col: $prefix-col;
@if ($prefix-grid != '') {
  $prefix-col: $prefix-grid;
  $prefix: #{$prefix-col+ '-'};
  $class-col: #{$prefix-col + '-' + $class-col};
}
/** Grid **/
@import 'mixin-grid';

.layout-container {
  width: 100%;
  // Max layout width
  @include at(max) {
    margin-left: auto;
    margin-right: auto;
    max-width: $layout-container-max-width;
  }
}

.#{$prefix}row,
.#{$prefix}column,
.#{$prefix}flex {
  display: flex;
  flex-wrap: wrap;
  flex-direction: row;
  align-items: stretch;
}

.#{$prefix}row.reverse {
  flex-direction: row-reverse;
}

.#{$prefix}column {
  flex-direction: column;
  &.reverse {
    flex-direction: column-reverse;
  }
}

.#{$class-col} {
  flex-basis: 0;
  flex-grow: 1;
  min-height: 1px;
  min-width: 0;
  /* Fix shrink IE 10 */
  flex-shrink: 1;
}

.#{$prefix}row {
  & > .#{$class-col} {
    max-width: 100%;
    width: 100%;
  }
}

.#{$prefix-col}-grow {
  flex: 1 1 auto;
}

.#{$prefix-col}-spacer {
  flex-grow: 2;
}

.order-first {
  order: -10000;
}
.order-last {
  order: 10000;
}
.order-none {
  order: 0;
}

/* For all */
@include make-grid();

// for each breakpoint
@each $key, $breakpoint in $breakpoints {
  $name: nth($breakpoint, 1);
  $size: nth($breakpoint, 2);

  .gutter-#{$name} {
    // margin: $size 0 0 $size;
    > div {
      padding: $size 0 0 $size;
    }
  }

  .gutter-x-#{$name} {
    // margin-left: $size;
    > div {
      padding-left: $size;
    }
  }

  .gutter-y-#{$name} {
    // margin-top: $size;
    > div {
      padding-top: $size;
    }
  }

  /*########## #{$key} ##########*/
  @include at($key) {
    @include make-grid($name);
  }
}

@import 'utils';
